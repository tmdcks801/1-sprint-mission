version: '3.8'

services:
  # 1) Reverse Proxy – 유일하게 외부에 노출 (3000)
  reverse-proxy:
    image: nginx:1.25-alpine
    container_name: reverse-proxy
    ports:
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./src/main/resources/static:/usr/share/nginx/html:ro
    depends_on:
      - backend
    networks: [ internal ]

  # 2) Spring Boot 백엔드
  backend:
    build:
      context: .
    container_name: backend
    env_file: # 방법 A: .env 전체 주입
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/discodeit
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: tmdcks1234
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on: [ db, redis, kafka ]
    networks: [ internal ]

  # 3) PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: tmdcks1234
      POSTGRES_DB: discodeit
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [ internal ]        # 외부 포트 노출 X

  # 4) Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks: [ internal ]

  # 5) Zookeeper (Kafka 의존)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks: [ internal ]

  # 6) Kafka
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    depends_on: [ zookeeper ]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks: [ internal ]

volumes:
  db_data:
  redis_data:
  kafka_data:

networks:
  internal:           # 모든 컨테이너가 공유하는 브리지망
    driver: bridge

